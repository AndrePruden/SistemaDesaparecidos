import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { UsuarioService } from '../../services/usuario.service';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-registro',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink], 
  templateUrl: './registro.component.html',
  styleUrls: ['./registro.component.scss'],
})
export class RegistroComponent {
  usuario = { nombre: '', email: '', password: '' };
  mensaje: string = '';
  mensajeError: string = '';

  constructor(private usuarioService: UsuarioService) {}

  private emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

  onSubmit(): void {
    console.log('üîë Intentando registrar el usuario con los siguientes datos:', this.usuario);
    if (!this.emailRegex.test(this.usuario.email)) {
      console.warn('‚ö†Ô∏è El correo electr√≥nico ingresado no es v√°lido:', this.usuario.email);
      this.mensajeError = 'Por favor, ingresa un correo electr√≥nico v√°lido.';
      return;
    }

    const contrase√±a = this.usuario.password;
    
    if (contrase√±a.length < 8) {
      console.warn('‚ö†Ô∏è La contrase√±a ingresada es demasiado corta:', contrase√±a);
      this.mensajeError = 'La contrase√±a debe tener al menos 8 caracteres.';
      return;
    }

    if (!/[A-Z]/.test(contrase√±a)) {
      console.warn('‚ö†Ô∏è La contrase√±a no contiene una letra may√∫scula:', contrase√±a);
      this.mensajeError = 'La contrase√±a debe contener al menos una letra may√∫scula.';
      return;
    }

    if (!/[0-9]/.test(contrase√±a)) {
      console.warn('‚ö†Ô∏è La contrase√±a no contiene un n√∫mero:', contrase√±a);
      this.mensajeError = 'La contrase√±a debe contener al menos un n√∫mero.';
      return;
    }

    if (!/[!@#$%^&*(),.?":{}|<>]/.test(contrase√±a)) {
      console.warn('‚ö†Ô∏è La contrase√±a no contiene un car√°cter especial:', contrase√±a);
      this.mensajeError = 'La contrase√±a debe contener al menos un car√°cter especial.';
      return;
    }

    console.log('‚úÖ Datos validados, intentando registrar al usuario en el backend...');
    this.usuarioService.registrarUsuario(this.usuario).subscribe(
      (response) => {
        console.log('üéâ Registro exitoso:', response);
        this.mensaje = response.message;  
        this.mensajeError = ''; 
        this.usuario = { nombre: '', email: '', password: '' }; 
      },
      (error) => {
        console.error('‚ùå Error al registrar usuario:', error);
        if (error.status === 400) {
          this.mensajeError = 'El correo electr√≥nico ya est√° registrado. Por favor, prueba con otro.';
        } else if (error.status === 500) {
          this.mensajeError = 'Hubo un error al intentar registrar el usuario. Por favor, intenta m√°s tarde.';
        } else {
          this.mensajeError = 'Ocurri√≥ un error desconocido. Por favor, intenta nuevamente.';
        }
        this.mensaje = ''; 
      }
    );
  }

  validarEmail(email: string): void {
    console.log('üîç Validando correo electr√≥nico:', email);
    if (!this.emailRegex.test(email)) {
      console.warn('‚ö†Ô∏è Correo electr√≥nico no v√°lido:', email);
      this.mensajeError = 'Por favor, ingresa un correo electr√≥nico v√°lido.';
    } else {
      this.mensajeError = '';
    }
  }
}
